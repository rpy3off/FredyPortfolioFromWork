@page "/admin/categories"
@using System.Net

<main class="admin-area-main">

    <Client.Components.Admin.Sidebar/>

    <div class="admin-area-content container-fluid bg-white">
        <div class="top-row g-0">
            <div class="col">
                <h1>Categories</h1>
                <br />
                <hr />
                <br />

                @if (InMemoryDatabaseCache.Categories == null || _attemntingToDeleteACategory == true)
                {
                    <LoadingDot />
                }
                else
                {
                    <a href="/admin/categories/create" class="btn btn-success shadow me-5 md-f-size-1-5">
                        <i class="fas fa-plus"></i> Create Category
                    </a>

                    <button @onclick="() => InMemoryDatabaseCache.GetCategoriesFromDatabaseAndCache()" class="btn btn-primary shadow md-f-size-1-5">
                        <i class="fas fa-sync"></i> Refresh Data
                    </button>

                    <br />
                    <br />
                    <br />

                    @if(InMemoryDatabaseCache.Categories.Count < 1) 
                    {
                        <h1>No categories found. Please create one.</h1>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-bordered table-sm">
                                <thead>
                                    <tr>
                                        <th scope="col">Name</th>
                                        <th scope="col">Thumbnail</th>
                                        <th scope="col">Description</th>
                                        <th scope="col">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var category in InMemoryDatabaseCache.Categories)
                                    {
                                        <tr>
                                            <th class="w-15" scope="row">
                                                <p>@category.Name</p>
                                            </th>
                                            <td class="w-35">
                                                <img src="@($"{APIEndpoints.ServerBaseUrl}/{category.ThumbnailImagePath}")" class="admin-index-thumbnail-image" alt="Categeroty thumbnail img"/>
                                            </td>
                                            <td class="w-15">
                                                <p>@category.Description</p>
                                            </td>
                                            <td class="w-35">
                                                <div class="d-flex flex-column">
                                                    <a href="/admin/categories/update/@category.CategoryId" class="btn btn-update shadow md-f-size-1-5">
                                                        <i class="fas fa-edit"></i> Update
                                                    </a>

                                                    <br/>

                                                    <button @onclick="(() => DeleteCategory(category))" class="btn btn-danger shadow md-f-size-1-5">
                                                        <i class="fas fa-trash"></i> Delete
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                }

                <div class="position-fixed bottom-0 end-5 z-index-5">
                    @if (_successfullyDeletedACategory == true)
                    {
                        <Toast IsError="false" ToastTitle="Successfully deleted a category."
                         ToastBody="The Category has been removed from the DB."
                         ParentMethodToCallOnClickBtnClose="() => _successfullyDeletedACategory = false"/>
                    }
                    @if (_unsuccessfullyTriedToDeleteACategory == true)
                    {
                        <Toast IsError="true" ToastTitle="Delete failed."
                         ToastBody="@($"The reason is \"{_reasonunsuccessfullyTriedToDeleteACategory}\" Please try again and if the issue persists contact the admin.")"
                         ParentMethodToCallOnClickBtnClose="() => _successfullyDeletedACategory = false"/>
                    }
                </div>

            </div>
        </div>
    </div>

</main>

@implements IDisposable
@code
{
    [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }

    protected override async Task OnInitializedAsync()
    {
        InMemoryDatabaseCache.OnCategoriesDataChanged += StateHasChanged;

        if (InMemoryDatabaseCache.Categories == null)
        {
            await InMemoryDatabaseCache.GetCategoriesFromDatabaseAndCache();
        }
    }

    public void Dispose() => InMemoryDatabaseCache.OnCategoriesDataChanged -= StateHasChanged;

    [Inject] HttpClient HttpClient { get; set; }
    private bool _attemntingToDeleteACategory = false;
    private bool _successfullyDeletedACategory = false;
    private bool _unsuccessfullyTriedToDeleteACategory = false;
    private string _reasonunsuccessfullyTriedToDeleteACategory = null;

    private async void DeleteCategory(Category categroyToDelete)
    {
        if (categroyToDelete.Posts != null && categroyToDelete.Posts.Count != 0)
        {
            string postTitlesThatMustBeDeletedFirst = string.Empty;

            for (int i = 0; i < categroyToDelete.Posts.Count; i++)
            {
                if (i == categroyToDelete.Posts.Count -1)
                {
                    // Last iteration
                    postTitlesThatMustBeDeletedFirst += $"\"{categroyToDelete.Posts[i].Title}\"";
                }
                else if (i == categroyToDelete.Posts.Count - 2)
                {
                    // Last iteration
                    postTitlesThatMustBeDeletedFirst += $"\"{categroyToDelete.Posts[i].Title}\" and ";
                }
                else
                {
                    // Other iterations
                    postTitlesThatMustBeDeletedFirst += $"\"{categroyToDelete.Posts[i].Title}\", ";
                }
            }

            _reasonunsuccessfullyTriedToDeleteACategory = $"The category still has posts in it. Please delete the posts titled {postTitlesThatMustBeDeletedFirst} first";
            _unsuccessfullyTriedToDeleteACategory = true;
        }
        else
        {
            _attemntingToDeleteACategory = true;

            HttpResponseMessage response = await HttpClient.DeleteAsync($"{APIEndpoints.s_categories}/{categroyToDelete.CategoryId}");

            if (response.StatusCode == HttpStatusCode.NoContent)
            {
                if (InMemoryDatabaseCache.Categories.Remove(categroyToDelete))
                {
                    _successfullyDeletedACategory = true;
                }
                else
                {
                    _reasonunsuccessfullyTriedToDeleteACategory = "An unexpected error has occured. Please try again. If the issue persists contact the admin";
                    _unsuccessfullyTriedToDeleteACategory = true;
                }
            }
            else
            {
                _reasonunsuccessfullyTriedToDeleteACategory = $"The API didnt return an HttpStatusCode.NoContent status code. Instead the API returned the status code {response.StatusCode} and gave the following reason for failure: {response.ReasonPhrase}.";
                _unsuccessfullyTriedToDeleteACategory = true;
            }
        }

        _attemntingToDeleteACategory = false;
        StateHasChanged();
    }
}

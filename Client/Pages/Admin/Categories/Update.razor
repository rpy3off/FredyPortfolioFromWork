@page "/admin/categories/update/{CategoryId:int}"
@using System.Net;

<main class="admin-area-main">
    <Client.Components.Admin.Sidebar/>

    <div class="admin-area-content container-fluid bg-white">
        <div class="row g-0">
            <div class="col">

                <h1 class="mb-4">Update category</h1>

                @if (_categoryToUpdate == null || _attemptingToUpdate == true)
                {
                    <LoadingDot />
                }
                else
                {
                    <EditForm Model="_categoryToUpdate" OnValidSubmit="UpdateCategroy">
                        <DataAnnotationsValidator />

                        <div class="form-group mb-5">
                            <label for="categoryName">Category name</label>
                                <InputText @bind-Value="_categoryToUpdate.Name" class="form-control" id="categoryName"></InputText>
                        </div>

                        <div class="form-group mb-5">
                            <label for="thumbnailImage">Thumbnail image (jpg/jpeg or png 1920x1080)</label>

                            @if (_attemptingToUploadImage == true)
                            {
                                <LoadingDot />
                            }
                            else if (_attemptToUploadFailed == true)
                            {
                                <h4 class="text-danger">Failed to upload image. @_reasonImageUploadsFailed</h4>
                            }
                            else
                            {
                                <img src="@($"{APIEndpoints.ServerBaseUrl}/{_categoryToUpdate.ThumbnailImagePath}")" class="admin-crud-form-thumbnail-image" alt="Post thumbnail image">
                            }

                            <br/>

                            <InputFile OnChange="HandleUploadedImage" class="form-control mt-4" id="thumbnailImage"/>
                        </div>

                         <div class="form-group mb-5">
                            <label for="categoryDescription">Category description</label>
                                <InputText @bind-Value="_categoryToUpdate.Description" class="form-control" id="categoryDescription"></InputText>
                        </div>

                        <ValidationSummary />

                        <button class="btn btn-success shadow d-block mt-5 md-f-size-1-5" type="submit">
                            <i class="far fa-save"></i> Save
                        </button>

                        <a href="/admin/categories" class="btn btn-primary shadow mt-5 md-f-size-1-5">
                            <i class="fas fa-arrow-left"></i> Back to all categories.
                        </a>

                    </EditForm>
                }

                <div class="position-fixed bottom-0 end-5 z-index-5">

                   @if (_updateSuccessful == true)
                    {
                        <Toast IsError="false" ToastTitle="Update Successful"
                         ToastBody="Your changes have been saved" 
                         ParentMethodToCallOnClickBtnClose="()=> _updateSuccessful = false"/>
                    }
                    @if (_attemptingToUpdateFailed == true)
                    {
                        <Toast IsError="true" ToastTitle="Update Failed" 
                         ToastBody="Update Failed, please contact the admin."
                         ParentMethodToCallOnClickBtnClose="()=> _attemptingToUpdateFailed = false"/>
                    }
                    
                </div>
            </div>
        </div>
    </div>
</main>

@code
{
    [Parameter] public int CategoryId { get; set; }

    [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
    private Category _categoryToUpdate = null;

    protected async override Task OnParametersSetAsync()
    {
        _categoryToUpdate = await InMemoryDatabaseCache.GetCategoryByCategoryId(CategoryId);
    }

    [Inject] HttpClient HttpClient { get; set; }
    private bool _attemptingToUpdate = false;
    private bool _attemptingToUpdateFailed = false;
    private bool _updateSuccessful = false;

    private async Task UpdateCategroy()
    {
        _attemptingToUpdate = true;

        HttpResponseMessage response = await HttpClient.PutAsJsonAsync<Category>($"{APIEndpoints.s_categories}/{CategoryId}", _categoryToUpdate);

        if (response.StatusCode == HttpStatusCode.NoContent)
        {

            Category unupdateCategoryInList = InMemoryDatabaseCache.Categories.Single(category => category.CategoryId == CategoryId);
            UtilityFunctions.CopyObjectProperties(_categoryToUpdate, unupdateCategoryInList);

            _updateSuccessful = true;
        }
        else
        {
            _attemptingToUpdateFailed = true;
        }

        _attemptingToUpdate = false;
    }

    private bool _attemptingToUploadImage = false;
    private bool _attemptToUploadFailed = false;
    private string _reasonImageUploadsFailed = null;

    private async Task HandleUploadedImage(InputFileChangeEventArgs e)
    {
        _attemptingToUploadImage = true;
        if (e.File.ContentType != "image/jpeg" && e.File.ContentType != "image/png")
        {
            _reasonImageUploadsFailed = "Please only upload JPEG, JPG or PNG images";
            _attemptToUploadFailed = true;
        }
        else if (e.File.Size >= 31457280) // 31457280 bytes = 30 megabytes
        {
            _reasonImageUploadsFailed = "Please only upload images that are smaller than 30 MB";
            _attemptToUploadFailed = true;
        }
        else
        {
            IBrowserFile uploadedImageFile = e.File;

            byte[] imageAsByteArray = new byte[uploadedImageFile.Size];

            await uploadedImageFile.OpenReadStream(31457280).ReadAsync(imageAsByteArray);
            string byteString = Convert.ToBase64String(imageAsByteArray);

            UploadedImage uploadedImage = new UploadedImage()
            {
               NewImageFileExtension = uploadedImageFile.Name.Substring(uploadedImageFile.Name.Length - 4),
               NewImageBase64Content = byteString,
               OldImagePath = string.Empty
            };

            HttpResponseMessage response = await HttpClient.PostAsJsonAsync<UploadedImage>(APIEndpoints.s_imageUpload, uploadedImage);

            if (response.StatusCode == HttpStatusCode.Created)
            {
                _categoryToUpdate.ThumbnailImagePath = await response.Content.ReadAsStringAsync();
            }
            else
            {
                _reasonImageUploadsFailed = $"Something went wrong when making a request to the server. Server response code: {response.StatusCode}. Server reason: {response.ReasonPhrase}.";
                _attemptToUploadFailed = true;
            }
        }

        _attemptingToUploadImage = false;
        StateHasChanged();
    }
}